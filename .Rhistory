#EP_BAM
rawFindOverlap <- findOverlaps(snp_ranges+50,gr_BAM)
RR_events_snpFindOverlap_EPBAM <- rawFindOverlap[rawFindOverlap@to %in% which(Stat_resEPB_EM_8_50$Pvalues[,1]<0.05)]
snp_spliceAI_overlap_RR_BAM <- snp_info$refsnp_id[snp_affected[which(snp_affected %in% RR_events_snpFindOverlap_EPBAM@from)]]
RR_events_snpFindOverlap_EPBAM[which(RR_events_snpFindOverlap_EPBAM@from %in% snp_affected )]
### SP find overlap Events
#EP_ST
rawFindOverlap <- findOverlaps(snp_ranges+50,gr_ST)
SP_events_snpFindOverlap_EPST <- rawFindOverlap[rawFindOverlap@to %in% which(ResultBootstrap_kallisto$Pvalues[,2]<0.05)]
snp_spliceAI_overlap_SP_ST <- snp_info$refsnp_id[snp_affected[which(snp_affected %in% SP_events_snpFindOverlap_EPST@from)]]
SP_events_snpFindOverlap_EPST[which(SP_events_snpFindOverlap_EPST@from %in% snp_affected )]
gr_ST[28875]
snp_info[541,]
SP_events_snpFindOverlap_EPST[which(SP_events_snpFindOverlap_EPST@from %in% snp_affected )]
#EP_BAM
rawFindOverlap <- findOverlaps(snp_ranges+50,gr_BAM)
SP_events_snpFindOverlap_EPBAM <- rawFindOverlap[rawFindOverlap@to %in% which(Stat_resEPB_EM_8_50$Pvalues[,2]<0.05)]
snp_spliceAI_overlap_SP_BAM <- snp_info$refsnp_id[snp_affected[which(snp_affected %in% SP_events_snpFindOverlap_EPBAM@from)]]
SP_events_snpFindOverlap_EPBAM[which(SP_events_snpFindOverlap_EPBAM@from %in% snp_affected )]
snp_info[c(40,135,143,541,582)]
snp_info[c(40,135,143,541,582),1]
RR_events_snpFindOverlap_EPBAM[which(RR_events_snpFindOverlap_EPBAM@from %in% snp_affected )]
gr_ST[28875]
snp_info[541,]
SP_events_snpFindOverlap_EPST[which(SP_events_snpFindOverlap_EPST@from %in% snp_affected )]
gr_ST[SP_events_snpFindOverlap_EPST[which(SP_events_snpFindOverlap_EPST@from %in% snp_affected )]@to]
gr_ST[SP_events_snpFindOverlap_EPST[which(SP_events_snpFindOverlap_EPST@from %in% snp_affected )]@to]
snp_info[SP_events_snpFindOverlap_EPST[which(SP_events_snpFindOverlap_EPST@from %in% snp_affected )]@from,]
snp_info[SP_events_snpFindOverlap_EPBAM[which(SP_events_snpFindOverlap_EPBAM@from %in% snp_affected )]@from,]
gr_BAM[SP_events_snpFindOverlap_EPBAM[which(SP_events_snpFindOverlap_EPBAM@from %in% snp_affected )]@to]
snp_info[SP_events_snpFindOverlap_EPBAM[which(SP_events_snpFindOverlap_EPBAM@from %in% snp_affected )]@from,]
gr_BAM[15773]
snp_info[40,]
RR_events_snpFindOverlap_EPBAM[which(RR_events_snpFindOverlap_EPBAM@from %in% snp_affected )]
gr_BAM[RR_events_snpFindOverlap_EPBAM[which(RR_events_snpFindOverlap_EPBAM@from %in% snp_affected )]@to]
snp_info[RR_events_snpFindOverlap_EPBAM[which(RR_events_snpFindOverlap_EPBAM@from %in% snp_affected )]@from,]
snp_info[RR_events_snpFindOverlap_EPBAM[which(RR_events_snpFindOverlap_EPBAM@from %in% snp_affected )]@from,]
snp_info[SP_events_snpFindOverlap_EPST[which(SP_events_snpFindOverlap_EPST@from %in% snp_affected )]@from,]
snp_info[SP_events_snpFindOverlap_EPBAM[which(SP_events_snpFindOverlap_EPBAM@from %in% snp_affected )]@from,]
gr_BAM[SP_events_snpFindOverlap_EPBAM[which(SP_events_snpFindOverlap_EPBAM@from %in% snp_affected )]@to]
names(gr_BAM[SP_events_snpFindOverlap_EPBAM[which(SP_events_snpFindOverlap_EPBAM@from %in% snp_affected )]@to])
unique(names(gr_BAM[SP_events_snpFindOverlap_EPBAM[which(SP_events_snpFindOverlap_EPBAM@from %in% snp_affected )]@to]))
eventsAffected <- c(eventsAffected,unique(names(gr_BAM[RR_events_snpFindOverlap_EPBAM[which(RR_events_snpFindOverlap_EPBAM@from %in% snp_affected )]@to])))
eventsAffected <-c()
eventsAffected <- c(eventsAffected,unique(names(gr_BAM[RR_events_snpFindOverlap_EPBAM[which(RR_events_snpFindOverlap_EPBAM@from %in% snp_affected )]@to])))
eventsAffected <- c(eventsAffected,unique(names(gr_ST[SP_events_snpFindOverlap_EPST[which(SP_events_snpFindOverlap_EPST@from %in% snp_affected )]@to])))
eventsAffected <- c(eventsAffected,unique(names(gr_BAM[SP_events_snpFindOverlap_EPBAM[which(SP_events_snpFindOverlap_EPBAM@from %in% snp_affected )]@to])))
eventsAffected
eventsAffected <-c()
eventsAffected <- rbind(eventsAffected,names(gr_BAM[RR_events_snpFindOverlap_EPBAM[which(RR_events_snpFindOverlap_EPBAM@from %in% snp_affected )]@to]), snp_info[RR_events_snpFindOverlap_EPBAM[which(RR_events_snpFindOverlap_EPBAM@from %in% snp_affected )]@from,])
eventsAffected
eventsAffected <- rbind(eventsAffected,c(names(gr_BAM[RR_events_snpFindOverlap_EPBAM[which(RR_events_snpFindOverlap_EPBAM@from %in% snp_affected )]@to]), snp_info[RR_events_snpFindOverlap_EPBAM[which(RR_events_snpFindOverlap_EPBAM@from %in% snp_affected )]@from,1]))
eventsAffected <-c()
eventsAffected <- rbind(eventsAffected,c(names(gr_BAM[RR_events_snpFindOverlap_EPBAM[which(RR_events_snpFindOverlap_EPBAM@from %in% snp_affected )]@to]), snp_info[RR_events_snpFindOverlap_EPBAM[which(RR_events_snpFindOverlap_EPBAM@from %in% snp_affected )]@from,1]))
eventsAffected
eventsAffected <- rbind(eventsAffected,c(names(gr_ST[SP_events_snpFindOverlap_EPST[which(SP_events_snpFindOverlap_EPST@from %in% snp_affected )]@to]), snp_info[SP_events_snpFindOverlap_EPST[which(SP_events_snpFindOverlap_EPST@from %in% snp_affected )]@from,1]))
eventsAffected <- rbind(eventsAffected,cbind(names(gr_ST[SP_events_snpFindOverlap_EPST[which(SP_events_snpFindOverlap_EPST@from %in% snp_affected )]@to]), snp_info[SP_events_snpFindOverlap_EPST[which(SP_events_snpFindOverlap_EPST@from %in% snp_affected )]@from,1]))
eventsAffected
eventsAffected <-c()
eventsAffected <- rbind(eventsAffected,c(names(gr_BAM[RR_events_snpFindOverlap_EPBAM[which(RR_events_snpFindOverlap_EPBAM@from %in% snp_affected )]@to]), snp_info[RR_events_snpFindOverlap_EPBAM[which(RR_events_snpFindOverlap_EPBAM@from %in% snp_affected )]@from,1]))
eventsAffected <- rbind(eventsAffected,cbind(names(gr_ST[SP_events_snpFindOverlap_EPST[which(SP_events_snpFindOverlap_EPST@from %in% snp_affected )]@to]), snp_info[SP_events_snpFindOverlap_EPST[which(SP_events_snpFindOverlap_EPST@from %in% snp_affected )]@from,1]))
eventsAffected
eventsAffected <- rbind(eventsAffected,cbind(names(gr_BAM[SP_events_snpFindOverlap_EPBAM[which(SP_events_snpFindOverlap_EPBAM@from %in% snp_affected )]@to]),snp_info[SP_events_snpFindOverlap_EPBAM[which(SP_events_snpFindOverlap_EPBAM@from %in% snp_affected )]@from,1]))
eventsAffected
Stat_resEPB_EM_8_50$PSI[c(eventsAffected[c(1,4,6),1]),]
Stat_resEPB_EM_8_50$PSI[eventsAffected[c(1,4,6),1],1]
Stat_resEPB_EM_8_50$PSI[eventsAffected[c(1,4,6),1],1]
eventsAffected[c(1,4,6),1]
Stat_resEPB_EM_8_50$PSI
Stat_resEPB_EM_8_50$deltaPSI[eventsAffected[c(1,4,6),1],1]
Stat_resEPB_EM_8_50$deltaPSI[eventsAffected[c(1,4,6),1],]
ResultBootstrap_kallisto$deltaPSI[eventsAffected[c(2,3),1],]
Stat_resEPB_EM_8_50$Pvalues[eventsAffected[c(1,4,6),1],]
ResultBootstrap_kallisto$Pvalues[eventsAffected[c(2,3),1],]
X
gr_snp_38
# Plink files read individually
bim <- read_bim("D:/david_otaegui/211188_MIS_Imputed_IDS_Pheno.bim")
fam <- read_fam('D:/david_otaegui/211188_MIS_Imputed_IDS_Pheno.fam')
X   <- read_bed('D:/david_otaegui/211188_MIS_Imputed_IDS_Pheno.bed', m_loci=nrow(bim), n_ind=nrow(fam))
# Plink files read individually
bim <- read_bim("D:/david_otaegui/211188_MIS_Imputed_IDS_Pheno.bim")
library(genio)
# Plink files read individually
bim <- read_bim("D:/david_otaegui/211188_MIS_Imputed_IDS_Pheno.bim")
fam <- read_fam('D:/david_otaegui/211188_MIS_Imputed_IDS_Pheno.fam')
X   <- read_bed('D:/david_otaegui/211188_MIS_Imputed_IDS_Pheno.bed', m_loci=nrow(bim), n_ind=nrow(fam))
rownames(bim) <- bim$id
rownames(fam) <- fam$id
library(VariantAnnotation)
fl <- system.file("D:/david_otaegui/211188_MIS_Imputed_IDS_Pheno.vcf.gz")
vcf <- readVcf("D:/david_otaegui/211188_MIS_Imputed_IDS_Pheno.vcf.gz", "hg19")
vcf[1]@rowRanges@ranges@NAMES
my.vcf <- read.vcfR('D:/david_otaegui/211188_MIS_Imputed_IDS_Pheno.vcf.gz')
library(VariantAnnotation)
# Create GRanges
prueba <- GRanges(data.frame(chr = paste0("chr",bim$chr), start = bim$pos, end = bim$pos))
chain19_to_38 <- import.chain(con = "C:/Users/clobatofern/Documents/R/win-library/4.1/liftOver/extdata/hg19ToHg38.over.chain" )
# LIFTOVER CHAIN
library(liftOver)
chain19_to_38 <- import.chain(con = "C:/Users/clobatofern/Documents/R/win-library/4.1/liftOver/extdata/hg19ToHg38.over.chain" )
gr_snp_38 <- liftOver(prueba, chain = chain19_to_38)
gr_snp_38
gr_snp_38
X
load("D:/david_otaegui/RData/X.RData")
X
gr_snp_38
my.vcf
vcf
library(vcfR)
my.vcf <- read.vcfR('D:/david_otaegui/211188_MIS_Imputed_IDS_Pheno.vcf.gz')
snp_info[SP_events_snpFindOverlap_EPBAM[which(SP_events_snpFindOverlap_EPBAM@from %in% snp_affected )]@from,]
SP_events_snpFindOverlap_EPBAM[which(SP_events_snpFindOverlap_EPBAM@from %in% snp_affected )]
snp_info[c(40,135,143,541,582),1]
snp_info[c(40,135,143,541,582),]
dataSpliceAI[c(40,135,143,541,582),]
snp_affected
dataSpliceAI[dataSpliceAI$sumCoef>0,1]
a <- gpu.matrix(rnorm(9),nrow=3,ncol=3,type="tensorflow")
inv <- solve(a) #the inverse matrix
a %*% inv
b <- c(1,1,1)
betas <- solve(a,b)
a%*%betas
#using ginv
inv_2 <- ginv(a)
a %*% inv_2
a <- gpu.matrix(rnorm(9),nrow=3,ncol=3,type="tensorflow")
inv <- solve(a) #the inverse matrix
a %*% inv
b <- c(1,1,1)
betas <- solve(a,b)
a%*%betas
#using ginv
inv_2 <- ginv(a)
a %*% inv_2
inv_2
a <- gpu.matrix(rnorm(9),nrow=3,ncol=3,type="tensorflow")
inv <- solve(a) #the inverse matrix
a %*% inv
b <- c(1,1,1)
betas <- solve(a,b)
a%*%betas
#using ginv
inv_2 <- ginv(a)
inv_2
SP_events_snpFindOverlap_EPBAM[which(SP_events_snpFindOverlap_EPBAM@from %in% snp_affected ),1]
SP_events_snpFindOverlap_EPBAM[which(SP_events_snpFindOverlap_EPBAM@from %in% snp_affected )]
snp_info
data
dataSpliceAI[which(dataSpliceAI$X.Uploaded_variation==eventsAffected[,2])]
dataSpliceAI[which(dataSpliceAI$X.Uploaded_variation %in% eventsAffected[,2])]
dataSpliceAI[which(dataSpliceAI$X.Uploaded_variation %in% eventsAffected[,2]),]
snp_associated_names <- c()
for (grangePos in c(1:length(gr_snp_38))) {
grangePos <- gr_snp_38[grangePos]
chr <- strsplit(as.character(seqnames(grangePos)),"r")[[1]][2]
posGenomeSNP <- as.character(end(grangePos))
id <- strsplit(my.vcf[pos]@fix[,3],":")[[1]]
id[1] <- chr
id[2] <- posGenomeSNP
id <- paste(id,collapse = ":")
snp_associated_names <- c(snp_associated_names,id)
}
grangePos
snp_associated_names <- c()
for (grangePos in c(1:length(gr_snp_38))) {
grangePos <- gr_snp_38[grangePos][[1]]
chr <- strsplit(as.character(seqnames(grangePos)),"r")[[1]][2]
posGenomeSNP <- as.character(end(grangePos))
id <- strsplit(my.vcf[pos]@fix[,3],":")[[1]]
id[1] <- chr
id[2] <- posGenomeSNP
id <- paste(id,collapse = ":")
snp_associated_names <- c(snp_associated_names,id)
}
grangePos
chr <- strsplit(as.character(seqnames(grangePos)),"r")[[1]][2]
posGenomeSNP <- as.character(end(grangePos))
posGenomeSNP
strsplit
id <- strsplit(my.vcf[pos]@fix[,3],":")[[1]]
pos
my.vcf
for (grangePos in c(1:length(gr_snp_38))) {
grange <- gr_snp_38[grangePos][[1]]
chr <- strsplit(as.character(seqnames(grange)),"r")[[1]][2]
posGenomeSNP <- as.character(end(grange))
id <- strsplit(my.vcf[grangePos]@fix[,3],":")[[1]]
id[1] <- chr
id[2] <- posGenomeSNP
id <- paste(id,collapse = ":")
snp_associated_names <- c(snp_associated_names,id)
}
snp_associated_names
listAttributes(snp_mart)
snp_info = getBM( filters="snp_filter", values=snp_ids, mart=snp_mart)
snp_info = getBM(attributes=listAttributes(snp_mart)$name, filters="snp_filter", values=snp_ids, mart=snp_mart)
snp_attributes = c("refsnp_id", "chr_name", "chrom_start","chrom_end","refsnp_id",)
snp_info = getBM(attributes=snp_attributes, filters="snp_filter", values=snp_ids, mart=snp_mart)
snp_info
listAttributes(snp_mart)
snp_attributes = c("refsnp_id", "chr_name", "chrom_start","chrom_end","snp",)
snp_attributes = c("refsnp_id", "chr_name", "chrom_start","chrom_end","snp",)
snp_attributes = c("refsnp_id", "chr_name", "chrom_start","chrom_end","snp")
snp_info = getBM(attributes=snp_attributes, filters="snp_filter", values=snp_ids, mart=snp_mart)
snp_info
snp_ranges
findOverlaps(snp_ranges,gr_snp_38)
findOverlaps(snp_ranges,gr_snp_38)$from
findOverlaps(snp_ranges,gr_snp_38)@from
findOverlaps(snp_ranges,gr_snp_38)@from %in% snp_affected
length(snp_ranges)
snp_affected
snp_ranges[findOverlaps(snp_ranges,gr_snp_38)@from %in% snp_affected]
snp_affected
findOverlaps(snp_ranges[snp_affected],gr_snp_38)@from %in% snp_affected
findOverlaps(snp_ranges[snp_affected],gr_snp_38)@from
findOverlaps(snp_ranges,gr_snp_38)@from
FO_disgenetSNP_samplesSNP <- findOverlaps(snp_ranges,gr_snp_38)
FO_disgenetSNP_samplesSNP
FO_disgenetSNP_samplesSNP@to %in% snp_affected
FO_disgenetSNP_samplesSNP@to
FO_disgenetSNP_samplesSNP@from %in% snp_affected
which(FO_disgenetSNP_samplesSNP@from %in% snp_affected)
snp_info[which(FO_disgenetSNP_samplesSNP@from %in% snp_affected),1]
snp_info[which(FO_disgenetSNP_samplesSNP@from %in% snp_affected),2]
snp_attributes = c("refsnp_id", "chr_name", "chrom_start","chrom_end")
snp_info = getBM(attributes=snp_attributes, filters="snp_filter", values=snp_ids, mart=snp_mart)
snp_info[which(FO_disgenetSNP_samplesSNP@from %in% snp_affected),2]
snp_info[which(FO_disgenetSNP_samplesSNP@from %in% snp_affected),1]
snp_info[which(FO_disgenetSNP_samplesSNP@from %in% snp_affected),1] %in% eventsAffected[,2]
snp_affected[which( snp_affected%in% FO_disgenetSNP_samplesSNP@from)]
c(40,135,143,541,582) %in% snp_affected[which( snp_affected%in% FO_disgenetSNP_samplesSNP@from)]
eventsAffected
snp_info[c(40,135,143,541,582),1]
snp_info[c(40,135,582),1]
FO_disgenetSNP_samplesSNP@from
snp_info[SP_events_snpFindOverlap_EPBAM[which(SP_events_snpFindOverlap_EPBAM@from %in% snp_affected )]@from,]
SP_events_snpFindOverlap_EPST[which(SP_events_snpFindOverlap_EPST@from %in% snp_affected )]
snp_info[c(40,135,582),1]
### RR find overlap Events
#EP_ST
rawFindOverlap <- findOverlaps(snp_ranges+50,gr_ST)
RR_events_snpFindOverlap_EPST <- rawFindOverlap[rawFindOverlap@to %in% which(ResultBootstrap_kallisto$Pvalues[,1]<0.05)]
#EP_BAM
rawFindOverlap <- findOverlaps(snp_ranges+50,gr_BAM)
RR_events_snpFindOverlap_EPBAM <- rawFindOverlap[rawFindOverlap@to %in% which(Stat_resEPB_EM_8_50$Pvalues[,1]<0.05)]
### SP find overlap Events
#EP_ST
rawFindOverlap <- findOverlaps(snp_ranges+50,gr_ST)
SP_events_snpFindOverlap_EPST <- rawFindOverlap[rawFindOverlap@to %in% which(ResultBootstrap_kallisto$Pvalues[,2]<0.05)]
#EP_BAM
rawFindOverlap <- findOverlaps(snp_ranges+50,gr_BAM)
SP_events_snpFindOverlap_EPBAM <- rawFindOverlap[rawFindOverlap@to %in% which(Stat_resEPB_EM_8_50$Pvalues[,2]<0.05)]
SP_events_snpFindOverlap_EPBAM
SP_events_snpFindOverlap_EPST
RR_events_snpFindOverlap_EPBAM
RR_events_snpFindOverlap_EPST
RR_events_snpFindOverlap_EPST
RR_events_snpFindOverlap_EPBAM
SP_events_snpFindOverlap_EPST <- rawFindOverlap[rawFindOverlap@to %in% which(ResultBootstrap_kallisto$Pvalues[,2]<0.01)]
SP_events_snpFindOverlap_EPST
RR_events_snpFindOverlap_EPST <- rawFindOverlap[rawFindOverlap@to %in% which(ResultBootstrap_kallisto$Pvalues[,1]<0.01)]
### RR find overlap Events
#EP_ST
rawFindOverlap <- findOverlaps(snp_ranges+50,gr_ST)
RR_events_snpFindOverlap_EPST <- rawFindOverlap[rawFindOverlap@to %in% which(ResultBootstrap_kallisto$Pvalues[,1]<0.01)]
RR_events_snpFindOverlap_EPST
### SP find overlap Events
#EP_ST
rawFindOverlap <- findOverlaps(snp_ranges+50,gr_ST)
SP_events_snpFindOverlap_EPST <- rawFindOverlap[rawFindOverlap@to %in% which(ResultBootstrap_kallisto$Pvalues[,2]<0.01)]
SP_events_snpFindOverlap_EPST
length/which(ResultBootstrap_kallisto$Pvalues[,2]<0.01))
length(which(ResultBootstrap_kallisto$Pvalues[,2]<0.01))
length(which(ResultBootstrap_kallisto$Pvalues[,1]<0.01))
length(which(ResultBootstrap_kallisto$Pvalues[,1]<0.05))
length(which(ResultBootstrap_kallisto$Pvalues[,2]<0.05))
length(which(Stat_resEPB_EM_8_50$Pvalues[,1]<0.01))
length(which(Stat_resEPB_EM_8_50$Pvalues[,1]<0.05))
length(which(Stat_resEPB_EM_8_50$Pvalues[,2]<0.05))
nrow(snp_info)
dataSpliceAI[which(dataSpliceAI$X.Uploaded_variation %in% unique(c(snp_spliceAI_overlap_RR_ST,snp_spliceAI_overlap_RR_BAM,snp_spliceAI_overlap_SP_ST,snp_spliceAI_overlap_SP_BAM ))),]
# Extraer el cromosoma de cada identificador
cromosomas <- sub("^CHR_HSCHR(\\d+)_.*$", "\\1", snp_info$chr_name)
# Imprimir los cromosomas obtenidos
snp_info$chr_name <- cromosomas
snp_info <- snp_info[cromosomas %in% c(as.character(c(1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22)),"X","Y","M"),]
snp_info$chr_name <- paste0("chr",snp_info$chr_name)
idList <- c()
res <- data.frame()
for (i in 1:nrow(snp_info)) {
id <- snp_info$refsnp_id[i]
if (!(id %in% idList)) {
idList <- c(idList, id)
res <- rbind(res,snp_info[i,])
}
}
snp_info<- res
snp_ranges <- GRanges(data.frame(chr =snp_info$chr_name , start = snp_info$chrom_start, end = snp_info$chrom_end))
snp_ranges
?chol_solve
library(GPUmatrix)
?chol
a <- gpu.matrix(1:10)
library(GPUmatrix)
a <- gpu.matrix(1:10)
b <- gpu.matrix(11:20)
cor(a,b)
a <- gpu.matrix(1:9,nrow=3,ncol=3)
a
class(a)
a@gm$is_cuda()
a@gm$is_cuda
a <- gpu.matrix(1:9,nrow=3,ncol=3, device="cpu")
a@gm$is_cuda
torch_device()
library(torch)
torch_device()
torch_cuda_is_available
torch_cuda_is_available()
cuda_is_available()
install.packages("D:/GPUmatrix_1.0.tar.gz",repos = NULL)
library(GPUmatrix)
remove.packages("GPUmatrix")
install.packages("D:/GPUmatrix_1.0.tar.gz", repos = NULL, type = "source")
y <- gpu.matrix(rnorm(9),3,3)
library(GPUmatrix)
y <- gpu.matrix(rnorm(9),3,3)
library(GPUmatrix)
library(GPUmatrix)
library(GPUmatrix)
y <- gpu.matrix(rnorm(9),3,3)
y
library(GPUmatrix)
y <- gpu.matrix(rnorm(9),3,3)
y
y[1,]
library(GPUmatrix)
library(GPUmatrix)
checkTorch <- function(){
library("torch")
return(T)
}
installedTORCH <- tryCatch(
checkTorch(),
error = function(e) {
return(F)
}
)
checkTensorflow <- function(){
library("tensorflow")
return(T)
}
installedTENSORFLOW <-tryCatch(
checkTensorflow(),
error = function(e) {
return(F)
}
)
!installedTORCH & !installedTENSORFLOW
stop("Not torch or tensorflow installed")
library(GPUmatrix)
y <- gpu.matrix(1:4,2,2, dimnames = list(c("a","b"),c("c","d")), dtype = "float32", sparse = T, device = "cpu")
y
rbind(y,y)
rbind(y,y)
cbind(y,y)
cbind(y,y)
?packageStartupMessage
library(GPUmatrix)
y <- gpu.matrix(1:4,2,2, dimnames = list(c("a","b"),c("c","d")), dtype = "float32", sparse = T, device = "cpu")
y
library(GPUmatrix)
library(GPUmatrix)
library(GPUmatrix)
detach("package:torch", unload = TRUE)
library(GPUmatrix)
y <- gpu.matrix(1:4,2,2, dimnames = list(c("a","b"),c("c","d")), dtype = "float32", sparse = T, device = "cpu")
library(GPUmatrix)
library(GPUmatrix)
detach("package:GPUmatrix", unload = TRUE)
library(GPUmatrix)
library(GPUmatrix)
detach("package:GPUmatrix", unload = TRUE)
library(GPUmatrix)
requireNamespace("torch", ..., quietly = FALSE)
library(GPUmatrix)
detach("package:GPUmatrix", unload = TRUE)
library(GPUmatrix)
installedTORCH <- tryCatch(
checkTorch(),
error = function(e) {
return(F)
}
)
installedTORCH
checkTorch <- function(){
requireNamespace("torch", quietly = FALSE)
# library("torch")
return(T)
}
checkTensorflow <- function(){
requireNamespace("tensorflow", quietly = FALSE)
# library("tensorflow")
return(T)
}
installedTORCH <- tryCatch(
checkTorch(),
error = function(e) {
return(F)
}
)
installedTENSORFLOW <-tryCatch(
checkTensorflow(),
error = function(e) {
return(F)
}
)
installedTENSORFLOW
installedTENSORFLOW <-tryCatch(
checkTensorflow(),
error = function(e) {
return(F)
}
)
checkTorch <- function(){
requireNamespace("torch", quietly = T)
# library("torch")
return(T)
}
checkTensorflow <- function(){
requireNamespace("tensorflow", quietly = T)
# library("tensorflow")
return(T)
}
installedTORCH <- tryCatch(
checkTorch(),
error = function(e) {
return(F)
}
)
installedTENSORFLOW <-tryCatch(
checkTensorflow(),
error = function(e) {
return(F)
}
)
checkTensorflow()
tensorLoad <- requireNamespace("tensorflow", quietly = F)
tensorLoad
torchLoad <- requireNamespace("torch", quietly = F)
torchLoad
requireNamespace("torch", quietly = F)
library(GPUmatrix)
detach("package:GPUmatrix", unload = TRUE)
detach("package:torch", unload = TRUE)
library(GPUmatrix)
y <- gpu.matrix(1:4,2,2, dimnames = list(c("a","b"),c("c","d")), dtype = "float32", sparse = T, device = "cpu")
detach("package:GPUmatrix", unload = TRUE)
library(GPUmatrix)
detach("package:GPUmatrix", unload = TRUE)
library(GPUmatrix)
library(GPUmatrix)
detach("package:GPUmatrix", unload = TRUE)
library(GPUmatrix)
y <- gpu.matrix(1:4,2,2, dimnames = list(c("a","b"),c("c","d")), dtype = "float32", sparse = T, device = "cpu")
library(torch)
library(GPUmatrix)
library(GPUmatrix)
y <- gpu.matrix(1:4,2,2, dimnames = list(c("a","b"),c("c","d")), dtype = "float32", sparse = T, device = "cpu")
library(GPUmatrix)
detach("package:GPUmatrix", unload = TRUE)
library(GPUmatrix)
loadNamespace("torch", quietly = F)
loadNamespace("torch")
library(GPUmatrix)
library(GPUmatrix)
detach("package:GPUmatrix", unload = TRUE)
library(GPUmatrix)
y <- gpu.matrix(rnorm(9),3,3)
attachNamespace("torch")
library(GPUmatrix)
detach("package:GPUmatrix", unload = TRUE)
detach("package:torch", unload = TRUE)
library(GPUmatrix)
detach("package:GPUmatrix", unload = TRUE)
library(GPUmatrix)
detach("package:torch", unload = TRUE)
library(GPUmatrix)
detach("package:GPUmatrix", unload = TRUE)
detach("package:torch", unload = TRUE)
library(GPUmatrix)
detach("package:GPUmatrix", unload = TRUE)
detach("package:torch", unload = TRUE)
library(torch)
detach("package:torch", unload = TRUE)
library(GPUmatrix)
y <- gpu.matrix(rnorm(9),3,3)
y
detach("package:GPUmatrix", unload = TRUE)
detach("package:torch", unload = TRUE)
library(GPUmatrix)
library(GPUmatrix)
library(GPUmatrix)
library(GPUmatrix)
R CMD check --as-cran
install.packages("tensorflow")
library(tensorflow)
install_tensorflow()
