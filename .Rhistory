source("Fn_Check_par_node.R")
source("Fn_Waves.R")
source("Fn_Wendland_32.R") # R = 0.5
source("Fn_Tst_sym_pd_GPU.R")
source("Fn_check_set_SpNorm_Reg_GPU.R") # SpN + tune regularize number
source("Fn_I_sparse.R")
source("Fn_Thres_tune_cov_GPU.R") # thresholding SIGMA_inv and return SIGMA and SIGMA_inv
source("Fn_shft_dist_mat.R") # construct shifted distance matrix using shft displacement for b function
source("Fn_chol_inv_gpu.R") # chol inv for gpu matrix
# phi: controls the propostion of conditional spatial dependence
# sig2_mat: diag matrix containing sigma2 in CAR
# H: adjacency matrix
#I_sps <- I_sparse(size = nrow(H_adj), value = 1)
I_sps <- diag(1, nrow(H_adj), nrow(H_adj))
I_sps_gpu <- as.gpu.matrix(I_sps)
c_inv <- I_sps_gpu - phi * H_adj  # gpu
#C11_inv <- c_inv %*% as.gpu.matrix(I_sparse(size = nrow(H_adj), value = 1/sig2_mat[1, 1]))
C11_inv <- c_inv %*% as.gpu.matrix(diag(1/sig2_mat[1, 1], nrow(H_adj), nrow(H_adj)))
#C11 <- chol2inv(chol(C11_inv))
C11 <- chol_inv_gpu(C11_inv) # gpu
n <- nrow(C11)
SIGMA <- C11 # gpu
reg_num <- reg_ini
restart <- T
while(restart){
restart <- F
SIGMA_inv_pd <- T # initializa label
# reset the SIGMA each while iteration
SIGMA <- C11
for(r in seq(2, p, by = 1)){
PN <- Check_par_node(Node = r, data = data)
R <- C <- NULL
cat("r:", r, "\n")
for(c in seq(1, (r-1), by = 1)){
BT <- NULL
C_rc <- 0
for(t in c(PN)){
if (b == "Tri-Wave") {
shft_dst_mat <- Shft_dst_mat(dsp_lon_mat = dsp_lon_mat, dsp_lat_mat = dsp_lat_mat,
dlt1 = dlt_lon_mat[r, t], dlt2 =  dlt_lat_mat[r, t])
B_rt <- TriWave_2D(shft_dst_mat = shft_dst_mat, A = A_mat[r, t])
B_rt <- as.gpu.matrix(B_rt)
#B_rt <- wave_v5(h = h, delta = dlt_mat[r, t], A = A_mat[r, t])
}
if (b == "Wendland") {
shft_dst_mat <- Shft_dst_mat(dsp_lon_mat = dsp_lon_mat, dsp_lat_mat = dsp_lat_mat,
dlt1 = dlt_lon_mat[r, t], dlt2 =  dlt_lat_mat[r, t])
B_rt <- WendLd32_2D(shft_dst_mat = shft_dst_mat, A = A_mat[r, t])
B_rt <- as.gpu.matrix(B_rt)
#B_rt <- WendLd_32(r = h, R = 0.5, dlt = dlt_mat[r, t], A = A_mat[r, t])
}
## spectral normalization of B_rt
B_rt <- check_set_SpNorm_Reg_gpu(B_rt, reg_num = reg_num) # gpu
#cat("B cond numb:", kappa(B_rt), "\n")
B_rt <- as.matrix(B_rt) # matrix for rbind with NULL
BT <- rbind(BT, t(B_rt)) # matrix
C_rc <- C_rc + B_rt %*% SIGMA[((t-1)*n+1) : (t*n), ((c-1)*n+1): (c*n)] # gpu
C_rc <- as.matrix(C_rc)
}
R <- cbind(R, C_rc)
C_cr <- t(C_rc)
C <- rbind(C, C_cr)
}
#Drr_inv <- c_inv %*% as.gpu.matrix(I_sparse(size = nrow(H_adj), value = 1/sig2_mat[r, r])) # gpu
Drr_inv <- c_inv %*% as.gpu.matrix(diag(1/sig2_mat[r, r], nrow(H_adj), nrow(H_adj)))
#D_rr <- chol2inv(chol(Drr_inv))
D_rr <- chol_inv_gpu(Drr_inv) # gpu
t <- c(PN)
Subset_cols <- function(t) {
start_col <- (t - 1) * n + 1
end_col <- t * n
result <- R[, start_col:end_col]
}
result_lst <- lapply(t, FUN = Subset_cols)
R_subset <- do.call(cbind, result_lst)
C_rr <- R_subset %*% BT + D_rr # gpu
SG <- SIGMA # p-1 for inverse, gpu
SG <- forceSymmetric(as.matrix(SG)) # matrix
Col <- rbind(C, C_rr) # gpu, C_rr is gpu
Row <- rbind(SG, R)
SIGMA <- cbind(Row, Col) # gpu
SIGMA <- forceSymmetric(as.matrix(SIGMA)) # matrix
## SIGMA_Inv
#Drr_inv <- chol2inv(chol(D_rr)) # Schur complement inverse
if (r == 2){
SG_inv <- C11_inv # gpu
}
CDrr_in <- C %*% Drr_inv     # gpu
#CDR_sym <- forceSymmetric(CDrr_in %*% R)
#CDR_sym <- forceSymmetric(C %*% Drr_inv %*% R)
cat("condition number of C", kappa(C), "\n")
#cat("condition number of CDinv", kappa(CDrr_in), "\n")
#cat("condition number of CDinvR", kappa(CDR_sym), "\n")
SGCD <- SG_inv %*% CDrr_in # gpu
RSG <- R %*% SG_inv # gpu
BK1 <- SG_inv + SGCD %*% RSG   # gpu
BK1 <- forceSymmetric(as.matrix(BK1)) # dsy matrix
#BK1 <- SG_inv %*% (SG + CDR_sym) %*% SG_inv
#BK1 <- forceSymmetric(BK1)
BK2 <- - SG_inv %*% (C %*% Drr_inv)   # gpu
BK2 <- as.matrix(BK2)
BK3 <- - (Drr_inv %*% R) %*% SG_inv   # gpu
BK3 <- as.matrix(BK3)
BK4 <- forceSymmetric(as.matrix(Drr_inv)) # dsy matrix
#cat("BK4", "\n")
#Tst_sym_pd(BK4)
SIGMA_inv <- rbind(cbind(BK1, BK2), cbind(BK3, BK4)) # matrix & dsymatrix
#SG_inv <- SIGMA_inv
SG_inv <- forceSymmetric(SIGMA_inv) # dsymatrix
SG_inv <- as.gpu.matrix(as.matrix(SG_inv)) # gpu
# to condition to break the for loop and start all over again
if (!as.logical(check_pd_gpu(SG_inv))) {
restart <- T
SIGMA_inv_pd <- F
cat("New reg_num needed.", "\n")
if (reg_num < 1) {
reg_num <- reg_num * 10
cat("Reg_num updated to:", reg_num, "\n")
} else {
reg_num <- reg_num + 0.1
cat("Reg_num updated to:", reg_num, "\n")
}
break # break the following of for loop and start from begining again
}
# early perturb SG_inv if not p.d.
cat("r", r, "\n")
cat("SG_inv", "\n")
Tst_sym_pd_gpu(SG_inv) # gpu
}
cat("Final reg_num:", reg_num, "\n")
if (SIGMA_inv_pd){
# Compute SIGMA_inv_ini, SG_inv constructed with the smallest possible reg_num
SIGMA_inv_ini <- SG_inv * (abs(SG_inv) > thres_ini) # gpu
# 1. tune threshold if SIGMA_inv_ini is NOT p.d.,
# 2. cov_mat construct with new thres
# 3. check p.d. until cov_mat is p.d. with the updated largest possible thres
# 4. return the thresholded and p.d. SIGMA_inv and SIGMA
SG_SG_inv_thres <- Thres_tune_cov_gpu(thres_ini = thres_ini,
cov_mat_thres = SIGMA_inv_ini,
cov_mat = SG_inv)
return(list(SIGMA = as.matrix(SIGMA),
SIGMA_inv = SG_SG_inv_thres$SIGMA_inv))
}
}
}
#----------
# 2D coords
#----------
ds <- 0.1
#s <- seq(-1 + ds/2, 1 - ds/2, by = ds)
s <- seq(-10 + ds/2, 10 - ds/2, by = ds)
crds <- cbind(s, s)
source("Fn_make_DSP_mat.R")
DSP <- make_DSP_mat(crds = crds)
DIST <- as.matrix(dist(crds, diag = T, upper = T))
setwd("C:/Users/clobatofern/Downloads/XC_Work-main/XC_Work-main")
#----------
# 2D coords
#----------
ds <- 0.1
#s <- seq(-1 + ds/2, 1 - ds/2, by = ds)
s <- seq(-10 + ds/2, 10 - ds/2, by = ds)
crds <- cbind(s, s)
source("Fn_make_DSP_mat.R")
DSP <- make_DSP_mat(crds = crds)
DIST <- as.matrix(dist(crds, diag = T, upper = T))
#Nb_radius <- 0.8 # 50% of DIST matrix will be set to zero
Nb_radius <- 8
H_adj <- matrix(as.numeric(abs(DIST) < Nb_radius), nrow(DIST), nrow(DIST))
diag(H_adj) <- 0
eig_val <- eigen(as.gpu.matrix(H_adj), symmetric = T, only.values = T)$val
spec <- Re(eig_val)
spec
phi <- 1/max(abs(spec)) # [1] 0.1344431; 0.0098534
phi
phi <- trunc(phi * 1000)/1000  # [1] 0.009
hierarchy_data_CAMS <- data.frame(
node_id = c(1, 2, 3, 4,  5, 5),
par_id = c(NA, 1, 2, 3, c(4, 1))
)
p = 5
source("Fn_para_mat_construct.R")
all_pars_lst_CAR_2D_CMS <- All_paras_CAR_2D(p = 5, data = hierarchy_data_CAMS)
source("Fn_set_ini_vals.R")
A_1 <- Fn_set_ini_vals(pars_mat = all_pars_lst_CAR_2D_CMS[[1]], ini_vals = 1)
dlt_lon_02 <- Fn_set_ini_vals(pars_mat = all_pars_lst_CAR_2D_CMS[[2]], ini_vals = 0.2)
dlt_lat_04 <- Fn_set_ini_vals(pars_mat = all_pars_lst_CAR_2D_CMS[[3]], ini_vals = 0.4)
sig2_mat_1 <- Fn_set_ini_vals(pars_mat = all_pars_lst_CAR_2D_CMS[[4]], ini_vals = 1)
## Tri-Wave
SG_SGinv_CAR_5_2D_TW_GPU <- TST12_SG_SGInv_CAR_2D_GPU(p = 5, data = hierarchy_data_CAMS,
A_mat = A_1,
dsp_lon_mat = DSP[, , 1],
dsp_lat_mat = DSP[, , 2],
dlt_lon_mat = dlt_lon_02,
dlt_lat_mat = dlt_lat_04,
b = "Tri-Wave",
phi =  phi, H_adj = H_adj,
sig2_mat = sig2_mat_1,
reg_ini = 1e-9, thres_ini = 1e-3)
phi
remove.packages("GPUmatrix")
install.packages("GPUmatrix")
remove.packages("GPUmatrix", lib="C:/Program Files/R/R-devel/library")
remove.packages("GPUmatrix", lib="C:/Program Files/R/R-devel/library")
library(GPUmatrix, lib.loc = "C:/Program Files/R/R-devel/library")
remove.packages("GPUmatrix", lib="C:/Program Files/R/R-devel/library")
install.packages("GPUmatrix")
# Load the torch library
library(torch)
library(GPUmatrix)
remove.packages("GPUmatrix", lib="C:/Program Files/R/R-devel/library")
install.packages("GPUmatrix")
install.packages("GPUmatrix")
library(GPUmatrix)
library(GPUmatrix, lib.loc = "C:/Program Files/R/R-devel/library")
library(GPUmatrix)
library(GPUmatrix)
remove.packages("GPUmatrix", lib="C:/Program Files/R/R-devel/library")
TST12_SG_SGInv_CAR_2D_GPU <- function(p, data, A_mat, dsp_lon_mat, dsp_lat_mat,
dlt_lon_mat, dlt_lat_mat, b = "Wendland",
phi, H_adj, sig2_mat,
reg_ini = 1e-9, thres_ini = 1e-3) {
#source("Fn_Matern_32.R")
source("Fn_Check_par_node.R")
source("Fn_Waves.R")
source("Fn_Wendland_32.R") # R = 0.5
source("Fn_Tst_sym_pd_GPU.R")
source("Fn_check_set_SpNorm_Reg_GPU.R") # SpN + tune regularize number
source("Fn_I_sparse.R")
source("Fn_Thres_tune_cov_GPU.R") # thresholding SIGMA_inv and return SIGMA and SIGMA_inv
source("Fn_shft_dist_mat.R") # construct shifted distance matrix using shft displacement for b function
source("Fn_chol_inv_gpu.R") # chol inv for gpu matrix
# phi: controls the propostion of conditional spatial dependence
# sig2_mat: diag matrix containing sigma2 in CAR
# H: adjacency matrix
#I_sps <- I_sparse(size = nrow(H_adj), value = 1)
I_sps <- diag(1, nrow(H_adj), nrow(H_adj))
I_sps_gpu <- as.gpu.matrix(I_sps)
c_inv <- I_sps_gpu - phi * H_adj  # gpu
#C11_inv <- c_inv %*% as.gpu.matrix(I_sparse(size = nrow(H_adj), value = 1/sig2_mat[1, 1]))
C11_inv <- c_inv %*% as.gpu.matrix(diag(1/sig2_mat[1, 1], nrow(H_adj), nrow(H_adj)))
#C11 <- chol2inv(chol(C11_inv))
C11 <- chol_inv_gpu(C11_inv) # gpu
n <- nrow(C11)
SIGMA <- C11 # gpu
reg_num <- reg_ini
restart <- T
while(restart){
restart <- F
SIGMA_inv_pd <- T # initializa label
# reset the SIGMA each while iteration
SIGMA <- C11
for(r in seq(2, p, by = 1)){
PN <- Check_par_node(Node = r, data = data)
R <- C <- NULL
cat("r:", r, "\n")
for(c in seq(1, (r-1), by = 1)){
BT <- NULL
C_rc <- 0
for(t in c(PN)){
if (b == "Tri-Wave") {
shft_dst_mat <- Shft_dst_mat(dsp_lon_mat = dsp_lon_mat, dsp_lat_mat = dsp_lat_mat,
dlt1 = dlt_lon_mat[r, t], dlt2 =  dlt_lat_mat[r, t])
B_rt <- TriWave_2D(shft_dst_mat = shft_dst_mat, A = A_mat[r, t])
B_rt <- as.gpu.matrix(B_rt)
#B_rt <- wave_v5(h = h, delta = dlt_mat[r, t], A = A_mat[r, t])
}
if (b == "Wendland") {
shft_dst_mat <- Shft_dst_mat(dsp_lon_mat = dsp_lon_mat, dsp_lat_mat = dsp_lat_mat,
dlt1 = dlt_lon_mat[r, t], dlt2 =  dlt_lat_mat[r, t])
B_rt <- WendLd32_2D(shft_dst_mat = shft_dst_mat, A = A_mat[r, t])
B_rt <- as.gpu.matrix(B_rt)
#B_rt <- WendLd_32(r = h, R = 0.5, dlt = dlt_mat[r, t], A = A_mat[r, t])
}
## spectral normalization of B_rt
B_rt <- check_set_SpNorm_Reg_gpu(B_rt, reg_num = reg_num) # gpu
#cat("B cond numb:", kappa(B_rt), "\n")
B_rt <- as.matrix(B_rt) # matrix for rbind with NULL
BT <- rbind(BT, t(B_rt)) # matrix
C_rc <- C_rc + B_rt %*% SIGMA[((t-1)*n+1) : (t*n), ((c-1)*n+1): (c*n)] # gpu
C_rc <- as.matrix(C_rc)
}
R <- cbind(R, C_rc)
C_cr <- t(C_rc)
C <- rbind(C, C_cr)
}
#Drr_inv <- c_inv %*% as.gpu.matrix(I_sparse(size = nrow(H_adj), value = 1/sig2_mat[r, r])) # gpu
Drr_inv <- c_inv %*% as.gpu.matrix(diag(1/sig2_mat[r, r], nrow(H_adj), nrow(H_adj)))
#D_rr <- chol2inv(chol(Drr_inv))
D_rr <- chol_inv_gpu(Drr_inv) # gpu
t <- c(PN)
Subset_cols <- function(t) {
start_col <- (t - 1) * n + 1
end_col <- t * n
result <- R[, start_col:end_col]
}
result_lst <- lapply(t, FUN = Subset_cols)
R_subset <- do.call(cbind, result_lst)
C_rr <- R_subset %*% BT + D_rr # gpu
SG <- SIGMA # p-1 for inverse, gpu
SG <- forceSymmetric(as.matrix(SG)) # matrix
Col <- rbind(C, C_rr) # gpu, C_rr is gpu
Row <- rbind(SG, R)
SIGMA <- cbind(Row, Col) # gpu
SIGMA <- forceSymmetric(as.matrix(SIGMA)) # matrix
## SIGMA_Inv
#Drr_inv <- chol2inv(chol(D_rr)) # Schur complement inverse
if (r == 2){
SG_inv <- C11_inv # gpu
}
CDrr_in <- C %*% Drr_inv     # gpu
#CDR_sym <- forceSymmetric(CDrr_in %*% R)
#CDR_sym <- forceSymmetric(C %*% Drr_inv %*% R)
cat("condition number of C", kappa(C), "\n")
#cat("condition number of CDinv", kappa(CDrr_in), "\n")
#cat("condition number of CDinvR", kappa(CDR_sym), "\n")
SGCD <- SG_inv %*% CDrr_in # gpu
RSG <- R %*% SG_inv # gpu
BK1 <- SG_inv + SGCD %*% RSG   # gpu
BK1 <- forceSymmetric(as.matrix(BK1)) # dsy matrix
#BK1 <- SG_inv %*% (SG + CDR_sym) %*% SG_inv
#BK1 <- forceSymmetric(BK1)
BK2 <- - SG_inv %*% (C %*% Drr_inv)   # gpu
BK2 <- as.matrix(BK2)
BK3 <- - (Drr_inv %*% R) %*% SG_inv   # gpu
BK3 <- as.matrix(BK3)
BK4 <- forceSymmetric(as.matrix(Drr_inv)) # dsy matrix
#cat("BK4", "\n")
#Tst_sym_pd(BK4)
SIGMA_inv <- rbind(cbind(BK1, BK2), cbind(BK3, BK4)) # matrix & dsymatrix
#SG_inv <- SIGMA_inv
SG_inv <- forceSymmetric(SIGMA_inv) # dsymatrix
SG_inv <- as.gpu.matrix(as.matrix(SG_inv)) # gpu
# to condition to break the for loop and start all over again
if (!as.logical(check_pd_gpu(SG_inv))) {
restart <- T
SIGMA_inv_pd <- F
cat("New reg_num needed.", "\n")
if (reg_num < 1) {
reg_num <- reg_num * 10
cat("Reg_num updated to:", reg_num, "\n")
} else {
reg_num <- reg_num + 0.1
cat("Reg_num updated to:", reg_num, "\n")
}
break # break the following of for loop and start from begining again
}
# early perturb SG_inv if not p.d.
cat("r", r, "\n")
cat("SG_inv", "\n")
Tst_sym_pd_gpu(SG_inv) # gpu
}
cat("Final reg_num:", reg_num, "\n")
if (SIGMA_inv_pd){
# Compute SIGMA_inv_ini, SG_inv constructed with the smallest possible reg_num
SIGMA_inv_ini <- SG_inv * (abs(SG_inv) > thres_ini) # gpu
# 1. tune threshold if SIGMA_inv_ini is NOT p.d.,
# 2. cov_mat construct with new thres
# 3. check p.d. until cov_mat is p.d. with the updated largest possible thres
# 4. return the thresholded and p.d. SIGMA_inv and SIGMA
SG_SG_inv_thres <- Thres_tune_cov_gpu(thres_ini = thres_ini,
cov_mat_thres = SIGMA_inv_ini,
cov_mat = SG_inv)
return(list(SIGMA = as.matrix(SIGMA),
SIGMA_inv = SG_SG_inv_thres$SIGMA_inv))
}
}
}
#----------
# 2D coords
#----------
ds <- 0.1
#s <- seq(-1 + ds/2, 1 - ds/2, by = ds)
s <- seq(-10 + ds/2, 10 - ds/2, by = ds)
crds <- cbind(s, s)
source("Fn_make_DSP_mat.R")
DSP <- make_DSP_mat(crds = crds)
DIST <- as.matrix(dist(crds, diag = T, upper = T))
#Nb_radius <- 0.8 # 50% of DIST matrix will be set to zero
Nb_radius <- 8
H_adj <- matrix(as.numeric(abs(DIST) < Nb_radius), nrow(DIST), nrow(DIST))
diag(H_adj) <- 0
eig_val <- eigen(as.gpu.matrix(H_adj), symmetric = T, only.values = T)$val
spec <- eig_val@gm$real
phi <- 1/max(abs(spec)) # [1] 0.1344431; 0.0098534
spec
eig_val
eig_val
eigen(as.gpu.matrix(H_adj), symmetric = T, only.values = T)
as.gpu.matrix(H_adj)
eigen(as.gpu.matrix(H_adj), symmetric = T, only.values = T)
eigen(as.gpu.matrix(H_adj), symmetric = T, only.values = T)$val
eig_val <- eigen(as.gpu.matrix(H_adj), symmetric = T, only.values = T)$values
eig_val
eig_val@gm$real
Re(eig_val)
spec <- Re(eig_val)
phi <- 1/max(abs(spec)) # [1] 0.1344431; 0.0098534
phi
phi <- trunc(phi * 1000)/1000  # [1] 0.009
hierarchy_data_CAMS <- data.frame(
node_id = c(1, 2, 3, 4,  5, 5),
par_id = c(NA, 1, 2, 3, c(4, 1))
)
p = 5
source("Fn_para_mat_construct.R")
all_pars_lst_CAR_2D_CMS <- All_paras_CAR_2D(p = 5, data = hierarchy_data_CAMS)
source("Fn_set_ini_vals.R")
A_1 <- Fn_set_ini_vals(pars_mat = all_pars_lst_CAR_2D_CMS[[1]], ini_vals = 1)
dlt_lon_02 <- Fn_set_ini_vals(pars_mat = all_pars_lst_CAR_2D_CMS[[2]], ini_vals = 0.2)
dlt_lat_04 <- Fn_set_ini_vals(pars_mat = all_pars_lst_CAR_2D_CMS[[3]], ini_vals = 0.4)
sig2_mat_1 <- Fn_set_ini_vals(pars_mat = all_pars_lst_CAR_2D_CMS[[4]], ini_vals = 1)
## Tri-Wave
SG_SGinv_CAR_5_2D_TW_GPU <- TST12_SG_SGInv_CAR_2D_GPU(p = 5, data = hierarchy_data_CAMS,
A_mat = A_1,
dsp_lon_mat = DSP[, , 1],
dsp_lat_mat = DSP[, , 2],
dlt_lon_mat = dlt_lon_02,
dlt_lat_mat = dlt_lat_04,
b = "Tri-Wave",
phi =  phi, H_adj = H_adj,
sig2_mat = sig2_mat_1,
reg_ini = 1e-9, thres_ini = 1e-3)
eig_val <- eigen(as.gpu.matrix(H_adj), symmetric = T, only.values = T)$values
eigen(as.gpu.matrix(H_adj), symmetric = T, only.values = T)$values
eigen(as.gpu.matrix(H_adj), symmetric = T, only.values = T)
eigen(as.gpu.matrix(H_adj), symmetric = T, only.values = T)$val
all_pars_lst_CAR_2D_CMS <- All_paras_CAR_2D(p = 5, data = hierarchy_data_CAMS)
## Tri-Wave
SG_SGinv_CAR_5_2D_TW_GPU <- TST12_SG_SGInv_CAR_2D_GPU(p = 5, data = hierarchy_data_CAMS,
A_mat = A_1,
dsp_lon_mat = DSP[, , 1],
dsp_lat_mat = DSP[, , 2],
dlt_lon_mat = dlt_lon_02,
dlt_lat_mat = dlt_lat_04,
b = "Tri-Wave",
phi =  phi, H_adj = H_adj,
sig2_mat = sig2_mat_1,
reg_ini = 1e-9, thres_ini = 1e-3)
a <- gpu.matrix(c(1,2,3,4),2,2)
a <- gpu.matrix(c(1,2,3,4),2,2,device = "float32")
a <- gpu.matrix(c(1,2,3,4),2,2)
library(torch)
a <- gpu.matrix(c(1,2,3,4),2,2,device = torch_device("float32"))
a <- gpu.matrix(c(1,2,3,4),2,2,device = torch_device("float32"))
torch_device("float32")
torch_device("cpu")
a <- gpu.matrix(c(1,2,3,4),2,2,device = torch_device("cpu"))
a <- gpu.matrix(c(1,2,3,4),2,2,device = torch_device("cuda"))
a <- gpu.matrix(c(1,2,3,4),2,2,device = torch_device("cpu"))
a <- gpu.matrix(c(1,2,3,4),2,2,device = "cuda")
a <- gpu.matrix(c(1,2,3,4),2,2,device = "cpu")
a <- gpu.matrix(c(1,2,3,4),2,2,device = "cuda")
a
a <- gpu.matrix(c(1,2,3,4),2,2,device = "cpu")
a
a <- gpu.matrix(c(1,2,3,4),2,2)
a
typeTensor
getOption("typeTensor")
device <- torch_device("cuda")
device
a <- gpu.matrix(c(1,2,3,4),2,2,device = device)
class(device)
device <- "cuda"
device_torch <- torch_device(device)
#Torch code
a_torch <- torch::torch_tensor(c(1,2,3,4),dtype = torch_double(),device = device_torch)
a_torch <- torch_reshape(a_torch, c(2, 2))
a_torch
setwd("C:/Users/clobatofern/OneDrive - Tecnun/GPUmatrix/EnvioRJournal")
knitr::is_latex_output()
unlink("GPUmatrixPaper_cache", recursive = TRUE)
library(rjtools)
install.packages("rmarkdown")
install.packages("tinytex")
install.packages("rmarkdown")
install.packages("rmarkdown")
install.packages("tinytex")
tinytex::install_tinytex()
tinytex::reinstall_tinytex()
library(GPUmatrix)
setwd("C:/Users/clobatofern/OneDrive - Tecnun/GPUmatrix/EnvioRJournal")
tinytex::install_tinytex()
tinytex::install_tinytex()
tinytex::install_tinytex()
tinytex::install_tinytex()
tinytex::install_tinytex()
tinytex::reinstall_tinytex()
Y
tinytex::tlmgr_install("texliveonfly")
tinytex::tlmgr_update()
tinytex::tlmgr_install("pgf")
tinytex::tlmgr("option repository ctan")
tinytex::tlmgr("option repository http://mirror.ctan.org/systems/texlive/tlnet")
tinytex::tlmgr_update()
tinytex::tinytex_root()
tinytex::tinytex_root()
tinytex::reinstall_tinytex()
tinytex::tlmgr_install("pgf")
tinytex::tlmgr_update()
setwd("C:/Users/clobatofern/OneDrive - Tecnun/GPUmatrix/EnvioRJournal")
tinytex::tlmgr_install("fancyhdr")
setwd("C:/Users/clobatofern/OneDrive - Tecnun/GPUmatrix/EnvioRJournal")
tinytex::tlmgr_update()
tinytex::tlmgr_install("microtype")
tinytex::tlmgr_install("setspace")
tinytex::tlmgr_update()
tinytex::tlmgr_install("environ")
tinytex::tlmgr_install("setspace")
setwd("D:/GPUmatrix")
setwd("C:/Users/clobatofern/OneDrive - Tecnun/GPUmatrix/EnvioRJournal")
