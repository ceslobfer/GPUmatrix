library(GPUmatrix)
installTorch
requireNamespace("torch", quietly = T)
installedTORCH <- requireNamespace("torch", quietly = T)
installedTORCH
torch::torch_is_installed()
res <- torch::torch_is_installed()
if(res) attachNamespace("torch")
installTorch <- tryCatch({
res <- FALSE
installedTORCH <- requireNamespace("torch", quietly = T)
if (installedTORCH){
res <- torch::torch_is_installed()
if(res) attachNamespace("torch")
}
return(res)
})
installTorch
library(GPUmatrix)
installTorch
detach("package:GPUmatrix", unload = TRUE)
remove.packages("GPUmatrix")
installTorch
library(GPUmatrix)
install.packages("GPUmatrix")
library(GPUmatrix)
installTorch
installTorch <- tryCatch({
res <- FALSE
installedTORCH <- requireNamespace("torch", quietly = T)
if (installedTORCH){
res <- torch::torch_is_installed()
if(res) attachNamespace("torch")
}
res
})
installTorch
help(package="GPUmatrix")
remove.packages("tensorflow")
library(GPUmatrix)
detach("package:GPUmatrix", unload = TRUE)
library(GPUmatrix)
library(GPUmatrix)
library(GPUmatrix)
getOption("typeTensor")
library(GPUmatrix)
getOption("typeTensor")
getOption("typeTensor") <- "tensorflow"
options(typeTensor = "tensorflow")
getOption("typeTensor")
getOption("typeTensor") <- "torch"
options(typeTensor = "torch")
getOption("typeTensor")
options(typeTensor = "tensorflow")
getOption("typeTensor")
gpu.matrix(nrow = 1, ncol = 1)
options(typeTensor = "torch")
gpu.matrix(nrow = 1, ncol = 1)
GPUmatrix::sort
ListaAlumnosAD <- read.csv("C:/Users/clobatofern/OneDrive - Tecnun/ListaAlumnosAD.csv", header=FALSE, row.names=NULL, sep=";")
View(ListaAlumnosAD)
ListaAlumnosAD <- ListaAlumnosAD[-c(41,105,151,184,185,226,229),]
alumnos <- ListaAlumnosAD[,c(1,2)]
colnames(alumnos) <- c("Nombres", "Apellidos")
alumnos
# Crear grupos aleatorios
set.seed(123) # Para reproducibilidad
alumnos$Grupo <- sample(1:2, nrow(alumnos), replace = TRUE)
# Crear función para asignar aulas basadas en el grupo y la capacidad
asignar_aula <- function(grupo, capacidad) {
if (grupo == 1) {
aulas_disponibles <- c("A", "B", "C", "D")
} else {
aulas_disponibles <- c("C")
}
aula_asignada <- sample(aulas_disponibles, 1)
# Verificar si queda capacidad en el aula asignada
if (grupo == 1 && capacidad[aula_asignada] > 0) {
capacidad[aula_asignada] <- capacidad[aula_asignada] - 1
} else if (grupo == 2 && capacidad[aula_asignada] > 0) {
capacidad[aula_asignada] <- capacidad[aula_asignada] - 1
} else {
# Si el aula está llena, asignar aula aleatoria disponible
aula_asignada <- sample(aulas_disponibles[capacidad > 0], 1)
capacidad[aula_asignada] <- capacidad[aula_asignada] - 1
}
return(aula_asignada)
}
# Capacidad de las aulas por turno
capacidad_aulas <- list(A = 28, B = 48, C = 73, D = 13)
# Asignar aulas a los alumnos
alumnos$Aula <- mapply(asignar_aula, alumnos$Grupo, rep(capacidad_aulas, nrow(alumnos)))
alumnos$Grupo
table(alumnos$Grupo)
# Crear grupos aleatorios
set.seed(123) # Para reproducibilidad
alumnos$Grupo <- sample(1:2, nrow(alumnos), replace = TRUE)
# Función para asignar aulas
asignar_aula <- function(grupo, capacidad_grupo) {
if (grupo == 1) {
aula <- sample(c("A", "B", "C", "D"), 1)
capacidad_grupo[aula] <- capacidad_grupo[aula] - 1
} else {
aula <- "C"
if (capacidad_grupo[aula] > 0) {
capacidad_grupo[aula] <- capacidad_grupo[aula] - 1
} else {
aula <- NA
}
}
return(aula)
}
# Capacidad de las aulas por turno
capacidad_grupo1 <- c(A = 28, B = 48, C = 73, D = 13)
capacidad_grupo2 <- c(A = 0, B = 0, C = 73, D = 0)
# Almacenar las aulas asignadas
aulas_asignadas <- character(nrow(alumnos))
# Asignar aulas a los alumnos
for (i in 1:nrow(alumnos)) {
grupo <- alumnos$Grupo[i]
if (grupo == 1) {
aulas_asignadas[i] <- asignar_aula(grupo, capacidad_grupo1)
} else {
aulas_asignadas[i] <- asignar_aula(grupo, capacidad_grupo2)
}
}
# Agregar las aulas asignadas al dataframe de alumnos
alumnos$Aula <- aulas_asignadas
View(alumnos)
table(alumnos$Grupo
)
table(alumnos$Aula)
# Establecer el número de alumnos y la cantidad máxima para el grupo 2 (max 73)
num_alumnos <- nrow(alumnos)
alumnos <- ListaAlumnosAD[,c(1,2)]
colnames(alumnos) <- c("Nombres", "Apellidos")
# Establecer el número de alumnos y la cantidad máxima para el grupo 2 (max 73)
num_alumnos <- nrow(alumnos)
max_grupo_2 <- 73
# Crear grupos aleatorios (Grupo 1 y Grupo 2 limitado a un máximo de 73)
set.seed(123) # Para reproducibilidad
grupo <- sample(rep(c(1, 2), c(num_alumnos - max_grupo_2, max_grupo_2)))
# Asignar aulas
aula <- ifelse(grupo == 1, sample(c("A", "B", "C", "D"), num_alumnos, replace = TRUE),
ifelse(grupo == 2, rep("C", sum(grupo == 2)), NA))
# Agregar asignaciones al dataframe de alumnos
alumnos$Grupo <- grupo
alumnos$Aula <- aula
table(alumnos$Grupo)
table(alumnos[which(alumnos$Grupo==1),])
table(alumnos[which(alumnos$Grupo==1),3])
table(alumnos[which(alumnos$Grupo==1),4])
alumnos <- ListaAlumnosAD[,c(1,2)]
colnames(alumnos) <- c("Nombres", "Apellidos")
# Definir la capacidad máxima de cada aula por turno
capacidad_aulas <- list(turno1 = c("A" = 28, "B" = 48, "C" = 73, "D" = 13),
turno2 = c("C" = 73))
# Función para asignar grupos y aulas
asignar_grupo_aula <- function(num_alumnos, capacidad_aulas) {
grupo <- rep(NA, num_alumnos)
aula <- rep(NA, num_alumnos)
# Asignar grupo 1 o grupo 2 respetando la capacidad máxima del aula C
num_grupo_2 <- sum(grupo == 2)
grupo[num_grupo_2 + 1 : num_alumnos] <- 1
grupo[1:num_grupo_2] <- ifelse(capacidad_aulas[['turno2']]['C'] > 0, 2, 1)
# Asignar aulas respetando la capacidad máxima de cada aula
for (i in 1:num_alumnos) {
if (grupo[i] == 1) {
aulas_disponibles <- names(capacidad_aulas[['turno1']])[capacidad_aulas[['turno1']] > 0]
aula[i] <- sample(aulas_disponibles, 1)
capacidad_aulas[['turno1']][aula[i]] <- capacidad_aulas[['turno1']][aula[i]] - 1
} else if (grupo[i] == 2) {
aula[i] <- "C"
capacidad_aulas[['turno2']]['C'] <- capacidad_aulas[['turno2']]['C'] - 1
}
}
return(list(Grupo = grupo, Aula = aula))
}
# Asignar grupos y aulas a los alumnos
set.seed(123) # Para reproducibilidad
asignaciones <- asignar_grupo_aula(nrow(alumnos), capacidad_aulas)
# Agregar asignaciones al dataframe de alumnos
alumnos$Grupo <- asignaciones$Grupo
alumnos$Aula <- asignaciones$Aula
alumnos <- ListaAlumnosAD[,c(1,2)]
colnames(alumnos) <- c("Nombres", "Apellidos")
# Definir la capacidad máxima de cada aula por turno
capacidad_aulas <- list(turno1 = c("A" = 28, "B" = 48, "C" = 73, "D" = 13),
turno2 = c("C" = 73))
# Función para asignar grupos y aulas
asignar_grupo_aula <- function(num_alumnos, capacidad_aulas) {
grupo <- rep(NA, num_alumnos)
aula <- rep(NA, num_alumnos)
# Asignar grupo 1 o grupo 2 respetando la capacidad máxima del aula C
num_grupo_2 <- sum(grupo == 2)
grupo[num_grupo_2 + 1 : num_alumnos] <- 1
grupo[1:num_grupo_2] <- ifelse(capacidad_aulas[['turno2']]['C'] > 0, 2, 1)
# Asignar aulas respetando la capacidad máxima de cada aula
for (i in 1:num_alumnos) {
if (grupo[i] == 1) {
aulas_disponibles <- names(capacidad_aulas[['turno1']])[capacidad_aulas[['turno1']] > 0]
aula[i] <- sample(aulas_disponibles, 1)
capacidad_aulas[['turno1']][aula[i]] <- capacidad_aulas[['turno1']][aula[i]] - 1
} else if (grupo[i] == 2) {
aula[i] <- "C"
capacidad_aulas[['turno2']]['C'] <- capacidad_aulas[['turno2']]['C'] - 1
}
}
return(list(Grupo = grupo, Aula = aula))
}
# Asignar grupos y aulas a los alumnos
set.seed(123) # Para reproducibilidad
asignaciones <- asignar_grupo_aula(nrow(alumnos), capacidad_aulas)
alumnos <- ListaAlumnosAD[,c(1,2)]
colnames(alumnos) <- c("Nombres", "Apellidos")
# Definir la capacidad máxima de cada aula por turno
capacidad_aulas <- list(turno1 = c(A = 28, B = 48, C = 73, D = 13),
turno2 = c(C = 73))
# Función para asignar grupos y aulas
asignar_grupo_aula <- function(num_alumnos, capacidad_aulas) {
grupo <- integer(num_alumnos)
aula <- character(num_alumnos)
# Asignar grupo 1 o grupo 2 respetando la capacidad máxima del aula C
num_grupo_2 <- sum(grupo == 2)
grupo[num_grupo_2 + 1 : num_alumnos] <- 1
grupo[1:num_grupo_2] <- ifelse(capacidad_aulas[['turno2']]['C'] > 0, 2, 1)
# Asignar aulas respetando la capacidad máxima de cada aula
for (i in 1:num_alumnos) {
if (grupo[i] == 1) {
aulas_disponibles <- names(capacidad_aulas[['turno1']])[capacidad_aulas[['turno1']] > 0]
aula[i] <- sample(aulas_disponibles, 1)
capacidad_aulas[['turno1']][aula[i]] <- capacidad_aulas[['turno1']][aula[i]] - 1
} else if (grupo[i] == 2) {
aula[i] <- "C"
capacidad_aulas[['turno2']]['C'] <- capacidad_aulas[['turno2']]['C'] - 1
}
}
return(list(Grupo = grupo, Aula = aula))
}
# Asignar grupos y aulas a los alumnos
set.seed(123) # Para reproducibilidad
asignaciones <- asignar_grupo_aula(nrow(alumnos), capacidad_aulas)
alumnos <- ListaAlumnosAD[,c(1,2)]
colnames(alumnos) <- c("Nombres", "Apellidos")
# Definir el número de plazas por aula
plazas <- c(A = 28, B = 48, C = 73, D = 13)
# Función para asignar turno y aula a cada alumno
asignar_turno_aula <- function(data, plazas) {
# Crear columnas para turno y aula
data$Turno <- NA
data$Aula <- NA
# Alumnos asignados en el primer turno
alumnos_primer_turno <- sample(1:nrow(data), sum(plazas[c("A", "B", "C")]), replace = FALSE)
data$Turno[alumnos_primer_turno] <- "Primer Turno"
# Asignar aulas para el primer turno
aulas_disponibles <- c("A", "B", "C")
for (i in alumnos_primer_turno) {
aula_asignada <- sample(aulas_disponibles, 1)
data$Aula[i] <- aula_asignada
plazas[aula_asignada] <- plazas[aula_asignada] - 1
if (plazas[aula_asignada] == 0) {
aulas_disponibles <- setdiff(aulas_disponibles, aula_asignada)
}
}
# Alumnos asignados en el segundo turno (solo aula C)
alumnos_segundo_turno <- setdiff(1:nrow(data), alumnos_primer_turno)
data$Turno[alumnos_segundo_turno] <- "Segundo Turno"
data$Aula[alumnos_segundo_turno] <- "C"
return(data)
}
# Asignar turnos y aulas a los alumnos
alumnos_asignados <- asignar_turno_aula(alumnos, plazas)
alumnos_asignados
table(alumnos_asignados$Turno)
table(alumnos_asignados[which(alumnos_asignados$Turno=="Primer Turno"),4])
cantidades <- c(rep("A", 28), rep("B", 48), rep("C", 73), rep("D", 13))
# Crear un vector aleatorio mezclando las letras
vector_aleatorio <- sample(cantidades)
table(vector_aleatorio)
alumnos <- ListaAlumnosAD
grupos <- sample(c(rep("PrimerTurno", (28+48+73+13)), rep("Segundo Turno",73)))
table(grupos)
alumnos <- ListaAlumnosAD[,c(1,2)]
alumnos <- cbind(alumnos,vector_aleatorio,grupos)
vector_aleatorio <- c(vector_aleatorio, rep(73, "C"))
ListaAlumnosAD <- ListaAlumnosAD[-c(41,105,151,184,185,226,229),]
ListaAlumnosAD <- read.csv("C:/Users/clobatofern/OneDrive - Tecnun/ListaAlumnosAD.csv", header=FALSE, sep=";")
View(ListaAlumnosAD)
ListaAlumnosAD <- ListaAlumnosAD[-c(41,105,151,184,185,226,229),]
cantidades <- c(rep("A", 28), rep("B", 48), rep("C", 73), rep("D", 13))
grupos <- sample(c(rep("PrimerTurno", (28+48+73+13)), rep("Segundo Turno",73)))
alumnos <- ListaAlumnosAD[,c(1,2)]
# Crear un vector aleatorio mezclando las letras
vector_aleatorio <- sample(cantidades)
vector_aleatorio <- c(vector_aleatorio, rep("C",73))
alumnos <- cbind(alumnos,vector_aleatorio,grupos)
cantidades <- c(rep("A", 28), rep("B", 48), rep("C", 73), rep("D", 12))
grupos <- sample(c(rep("PrimerTurno", (28+48+73+13)), rep("Segundo Turno",73)))
alumnos <- ListaAlumnosAD[,c(1,2)]
# Crear un vector aleatorio mezclando las letras
vector_aleatorio <- sample(cantidades)
vector_aleatorio <- c(vector_aleatorio, rep("C",72))
table(vector_aleatorio)
table(grupos)
alumnos <- cbind(alumnos,vector_aleatorio,grupos)
cantidades <- c(rep("A", 28), rep("B", 48), rep("C", 73), rep("D", 12))
grupos <- sample(c(rep("PrimerTurno", (28+48+73+12)), rep("Segundo Turno",72)))
alumnos <- ListaAlumnosAD[,c(1,2)]
# Crear un vector aleatorio mezclando las letras
vector_aleatorio <- sample(cantidades)
vector_aleatorio <- c(vector_aleatorio, rep("C",72))
table(vector_aleatorio)
table(grupos)
alumnos <- cbind(alumnos,vector_aleatorio,grupos)
cantidades <- c(rep("A", 28), rep("B", 48), rep("C", 73), rep("D", 12))
grupos <- c(rep("PrimerTurno", (28+48+73+12)), rep("Segundo Turno",72))
alumnos <- ListaAlumnosAD[,c(1,2)]
# Crear un vector aleatorio mezclando las letras
vector_aleatorio <- cantidades
vector_aleatorio <- c(vector_aleatorio, rep("C",72))
alumnos <- cbind(alumnos,vector_aleatorio,grupos)
colnames(alumnos) <- c("Nombres", "Apellidos", "Aula", "Turno")
alumnos[,c(3,4)]
alumnos[,c(3,4)] <- alumnos[sample(1:nrow(alumnos)),c(3,4)]
View(alumnos)
View(alumnos)
setwd("C:/Users/clobatofern/OneDrive - Tecnun")
write.csv(alumnos, file = "ListaAlumnosAD_ordenada.csv")
library(readr)
ListaAlumnosAD <- read_delim("ListaAlumnosAD.csv",
delim = ";", escape_double = FALSE, trim_ws = TRUE)
View(ListaAlumnosAD)
table(ListaAlumnosAD$A)
73*2
table(ListaAlumnosAD[which(ListaAlumnosAD[,3]==1),3])
table(ListaAlumnosAD[which(ListaAlumnosAD[,3]==1),4])
table(ListaAlumnosAD[which(ListaAlumnosAD[,3]==2),4])
library(readxl)
ListaAlumnosAD <- read_excel("ListaAlumnosAD.xlsx",
col_names = FALSE)
View(ListaAlumnosAD)
table(ListaAlumnosAD[which(ListaAlumnosAD[,3]==2),4])
View(ListaAlumnosAD)
table(ListaAlumnosAD[which(ListaAlumnosAD[,3]==1),4])
library(readr)
ListaAlumnosAD <- read_delim("ListaAlumnosAD.csv",
delim = ";", escape_double = FALSE, col_names = FALSE,
trim_ws = TRUE)
View(ListaAlumnosAD)
table(ListaAlumnosAD[which(ListaAlumnosAD[,3]==1),4])
table(ListaAlumnosAD[which(ListaAlumnosAD[,3]==2),4])
View(ListaAlumnosAD)
ListaAlumnosAD <- ListaAlumnosAD[-c(233:239),]
View(alumnos)
ListaAlumnosAD[,c(3,4)] <- ListaAlumnosAD[sample(1:nrow(ListaAlumnosAD)),c(3,4)]
library(readr)
ListaAlumnosAD <- read_delim("ListaAlumnosAD.csv",
delim = ";", escape_double = FALSE, col_names = FALSE,
trim_ws = TRUE)
View(ListaAlumnosAD)
alumnos <- ListaAlumnosAD[-c(233:239),]
alumnos[,c(3,4)] <- alumnos[sample(1:nrow(alumnos)),c(3,4)]
nrow(ListaAlumnosAD)
nrow(alumnos)
alumnos <- rbind(alumnos, ListaAlumnosAD[c(233:239),])
write.csv(alumnos, file = "alumnos.csv")
write.csv2(alumnos, file = "alumnos.csv")
library(readr)
ListaAlumnosAD <- read_delim("ListaAlumnosAD.csv",
delim = ";", escape_double = FALSE, col_names = FALSE,
trim_ws = TRUE)
View(ListaAlumnosAD)
table(ListaAlumnosAD[which(ListaAlumnosAD[,3]==1),4])
table(ListaAlumnosAD[which(ListaAlumnosAD[,3]==2),4])
library(readr)
sample_groups <- read_csv("C:/Users/clobatofern/Downloads/sample_groups.csv")
View(sample_groups)
28+48+72+20
install.packages("gptstudio")
require(usethis)
edit_r_environ()
